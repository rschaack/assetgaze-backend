# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

# This is the main section where we define all our services (containers)
services:
  # Define our .NET API service
  api:
    container_name: assetgaze-api # A friendly name for our API container
    build:
      context: . # The build context is the current directory (the project root)
      dockerfile: src/Assetgaze/Dockerfile # The path to the Dockerfile we created
    ports:
      - "5001:8080"
      - "5002:8081" # Kestrel is configured in code to listen on 8081 for HTTPS
    environment:
      # Environment variables passed to our API service
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development  
      # --- ADD THESE ENVIRONMENT VARIABLES FOR KESTREL (the .NET web server) ---
      - Kestrel__Certificates__Default__Path=/https/assetgaze.pfx
      - Kestrel__Certificates__Default__Password=dev-password # Use the same password as above
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=assetgazedb;Username=assetgazeuser;Password=yoursecurepassword
    volumes:
      # This maps the .pfx file on your Mac to the path inside the container that Kestrel is looking for.
      # It's read-only (:ro) because the container only needs to read it.
      - ~/.aspnet/https/assetgaze.pfx:/https/assetgaze.pfx:ro
    depends_on:
      db:
        condition: service_healthy # Wait for the healthcheck to pass

  # Define our PostgreSQL database service
  db:
    container_name: assetgaze-db # A friendly name for our database container
    image: postgres:16-alpine # Use the official PostgreSQL 16 image from Docker Hub
    environment:
      # These variables are used by the postgres image to initialize the database
      - POSTGRES_DB=assetgazedb
      - POSTGRES_USER=assetgazeuser
      - POSTGRES_PASSWORD=yoursecurepassword
    ports:
      # Maps port 5432 inside the container to port 5432 on your Mac, so you can connect with a DB tool if needed.
      - "5432:5432"
    volumes:
      # This creates a persistent volume. The data in your database will be saved here,
      # so it will still be there even if you stop and restart the container.
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      # This command checks if the postgres user can connect to the database
      test: ["CMD", "pg_isready", "-U", "assetgazeuser", "-d", "assetgazedb"]
      interval: 5s   # Check every 5 seconds
      timeout: 5s    # Wait up to 5 seconds for the command to respond
      retries: 5     # Try up to 5 times before marking as unhealthy

# This section defines the named volumes used by our services
volumes:
  postgres_data: